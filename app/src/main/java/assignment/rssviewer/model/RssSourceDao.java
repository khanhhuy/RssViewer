package assignment.rssviewer.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table RSS_SOURCE.
 */
public class RssSourceDao extends AbstractDao<RssSource, Long>
{

    public static final String TABLENAME = "RSS_SOURCE";
    private DaoSession daoSession;
    ;
    private Query<RssSource> category_RssSourcesQuery;
    private String selectDeep;

    public RssSourceDao(DaoConfig config)
    {
        super(config);
    }

    public RssSourceDao(DaoConfig config, DaoSession daoSession)
    {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists)
    {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'RSS_SOURCE' (" + //
                           "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                           "'NAME' TEXT," + // 1: name
                           "'URI_STRING' TEXT," + // 2: uriString
                           "'CATEGORY_ID' INTEGER NOT NULL );"); // 3: categoryId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists)
    {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RSS_SOURCE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, RssSource entity)
    {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null)
        {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null)
        {
            stmt.bindString(2, name);
        }

        String uriString = entity.getUriString();
        if (uriString != null)
        {
            stmt.bindString(3, uriString);
        }
        stmt.bindLong(4, entity.getCategoryId());
    }

    @Override
    protected void attachEntity(RssSource entity)
    {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset)
    {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public RssSource readEntity(Cursor cursor, int offset)
    {
        RssSource entity = new RssSource( //
                                          cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                                          cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                                          cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uriString
                                          cursor.getLong(offset + 3) // categoryId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, RssSource entity, int offset)
    {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUriString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategoryId(cursor.getLong(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(RssSource entity, long rowId)
    {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(RssSource entity)
    {
        if (entity != null)
        {
            return entity.getId();
        }
        else
        {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable()
    {
        return true;
    }

    /**
     * Internal query to resolve the "rssSources" to-many relationship of Category.
     */
    public List<RssSource> _queryCategory_RssSources(long categoryId)
    {
        synchronized (this)
        {
            if (category_RssSourcesQuery == null)
            {
                QueryBuilder<RssSource> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryId.eq(null));
                category_RssSourcesQuery = queryBuilder.build();
            }
        }
        Query<RssSource> query = category_RssSourcesQuery.forCurrentThread();
        query.setParameter(0, categoryId);
        return query.list();
    }

    protected String getSelectDeep()
    {
        if (selectDeep == null)
        {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM RSS_SOURCE T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.'CATEGORY_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected RssSource loadCurrentDeep(Cursor cursor, boolean lock)
    {
        RssSource entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        if (category != null)
        {
            entity.setCategory(category);
        }

        return entity;
    }

    public RssSource loadDeep(Long key)
    {
        assertSinglePk();
        if (key == null)
        {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try
        {
            boolean available = cursor.moveToFirst();
            if (!available)
            {
                return null;
            }
            else if (!cursor.isLast())
            {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        }
        finally
        {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<RssSource> loadAllDeepFromCursor(Cursor cursor)
    {
        int count = cursor.getCount();
        List<RssSource> list = new ArrayList<RssSource>(count);

        if (cursor.moveToFirst())
        {
            if (identityScope != null)
            {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try
            {
                do
                {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            }
            finally
            {
                if (identityScope != null)
                {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<RssSource> loadDeepAllAndCloseCursor(Cursor cursor)
    {
        try
        {
            return loadAllDeepFromCursor(cursor);
        }
        finally
        {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<RssSource> queryDeep(String where, String... selectionArg)
    {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity RssSource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties
    {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property UriString = new Property(2, String.class, "uriString", false, "URI_STRING");
        public final static Property CategoryId = new Property(3, long.class, "categoryId", false, "CATEGORY_ID");
    }

}
