package assignment.rssviewer.model;

import assignment.rssviewer.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SUGGESTION_SOURCE.
 */
public class SuggestionSource {

    private Long id;
    private String name;
    private String urlString;
    private long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SuggestionSourceDao myDao;

    private SuggestionCategory suggestionCategory;
    private Long suggestionCategory__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SuggestionSource() {
    }

    public SuggestionSource(Long id) {
        this.id = id;
    }

    public SuggestionSource(Long id, String name, String urlString, long categoryId) {
        this.id = id;
        this.name = name;
        this.urlString = urlString;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSuggestionSourceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getUrlString() {
        return urlString;
    }

    public void setUrlString(String urlString) {
        this.urlString = urlString;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public SuggestionCategory getSuggestionCategory() {
        long __key = this.categoryId;
        if (suggestionCategory__resolvedKey == null || !suggestionCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SuggestionCategoryDao targetDao = daoSession.getSuggestionCategoryDao();
            SuggestionCategory suggestionCategoryNew = targetDao.load(__key);
            synchronized (this) {
                suggestionCategory = suggestionCategoryNew;
            	suggestionCategory__resolvedKey = __key;
            }
        }
        return suggestionCategory;
    }

    public void setSuggestionCategory(SuggestionCategory suggestionCategory) {
        if (suggestionCategory == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.suggestionCategory = suggestionCategory;
            categoryId = suggestionCategory.getId();
            suggestionCategory__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
